/*============================================================================*\
	DO NOT EDIT THIS FILE. THIS IS A CORE FILE.
/*============================================================================*/

.fab-forms-buttons () when (@formsAndButtonsEnabled = true) {
	input:focus,
	select:focus,
	textarea:focus,
	button:focus {
		outline: none;
	}
	.input,
	.textarea,
	.select {
		-webkit-appearance: none;
		.border(@inputBorderColor; @inputBorderWidth);
		.background(@inputBackground);
		.color(@inputColor);
		.fill();
		.font(@inputFont; @inputFontSize);
		.rounded(@inputRounded);
		.min-height(@inputMinHeight);
		.min-width(@inputMinWidth);
		.outline(0);
		.padding(@inputPaddingVertical; @inputPaddingHorizontal);
		.spaced(@inputMarginBottom);
		.rounded(0);
		&:hover {
			.border-color(@inputBorderColorHover);
		}
		&:focus {
			.border-color(@inputBorderColorFocus);
		}
		&::-webkit-input-placeholder {
			.color(@inputPlaceholderColor);
		}
		&:-moz-placeholder { /* Firefox 18- */
			.color(@inputPlaceholderColor);
		}
		&::-moz-placeholder {  /* Firefox 19+ */
			.color(@inputPlaceholderColor);
		}
		&:-ms-input-placeholder {
			.color(@inputPlaceholderColor);
		}
		&:disabled {
			.background(@inputBackgroundDisabled);
			.color(@inputColorDisabled);
			.cursor(@inputCursorDisabled);
		}
		&--borderless {
			.border(@inputBackground);
			&:hover,
			&:focus {
				.border(@inputBackground);
			}
		}
		&--inline {
			.inline-block();
			.margin(right; .6);
			.width(auto);
		}
	}
	.textarea {
		.line-height(@textareaLineHeight);
		.min-height(@textareaMinHeight);
		.padding(@textareaPaddingVertical; @textareaPaddingHorizontal);
		.resize(@textareaResize);
	}
	.label {
		.block();
		.font-weight(@labelFontWeight);
		.line-height(@labelLineHeight);
		.margin(right; @labelMarginRight);
		.spaced(@labelMarginBottom);
		&--inline {
			.inline-block();
		}
	}
	.button {
		-webkit-tap-highlight-color: @buttonColor;
		.align(center);
		.background(@buttonBackground);
		.border(@buttonBorderColor; .2);
		.color(@buttonColor);
		.cursor();
		.font(@buttonFont; @buttonFontSize; @buttonFontWeight; 1em);
		.inline-block();
		.margin(bottom; @buttonMarginBottom);
		.padding(@buttonPaddingVertical; @buttonPaddingHorizontal);
		.rounded(@buttonRounded);
		.user-select();
		.text-decoration(none);
		.text-shadow(none);
		&:hover {
			.border-color(@buttonBackgroundHover);
			.background(@buttonBackgroundHover);
			.color(@buttonColor);
		}
		&:active {
			.background(@buttonBackgroundActive);
		}
		.check () when(@buttonBorderColor = false) {
			.border(0);
		}
		.check () when(@buttonTransitionEnabled = true) {
			.transition(all);
		}
		&--colored {
			.background(@coloredButtonBackground);
			.border-color(@coloredButtonBorderColor);
			.color(@coloredButtonColor);
			&:hover {
				.border-color(@coloredButtonBackgroundHover);
				.background(@coloredButtonBackgroundHover);
				.color(@coloredButtonColor);
			}
			&:active {
				.background(@coloredButtonBackgroundActive);
			}
			&.button--outlined {
				.background(none);
				.background-color(none);
				.border-color(@coloredButtonBackground);
				.color(@coloredButtonBackground);
				&:hover {
					.background(@coloredButtonBackground);
					.border-color(@coloredButtonBackground);
					.color(@buttonColor);
				}
				&:disabled,
				&.button--disabled {
					.background(lighten(@disabledButtonBackground, 5%));
					.border-color(@disabledButtonBackground);
					.color(@disabledButtonColor);
					&:hover {
						.background(lighten(@disabledButtonBackground, 5%));
						.border-color(@disabledButtonBackground);
						.color(@disabledButtonColor);
					}
				}
			}
		}
		.check();
		&--light {
			.background(lighten(@buttonBackground, 38%));
			.border-color(lighten(@buttonBackground, 38%));
			.color(@buttonBackground) !important;
			&:hover {
				.background(lighten(@buttonBackground, 28%));
				.border-color(lighten(@buttonBackground, 28%));
			}
		}
		&--outlined {
			.background(none);
			.border-color(@buttonBackground);
			.border-style(solid);
			.border-width(1px);
			.color(@buttonBackground);
			&:hover {
				.border-color(@buttonBackground);
				.background(@buttonBackground);
				.color(@buttonColor);
			}
			&:disabled,
			&--disabled {
				.background(lighten(@disabledButtonBackground, 5%));
				.border-color(lighten(@buttonBackground, 20%));
				.color(@disabledButtonColor);
				&:hover {
					.background(lighten(@disabledButtonBackground, 5%));
					.border-color(lighten(@buttonBackground, 20%));
					.color(@disabledButtonColor);
				}
			}
		}
		&:disabled,
		&--disabled {
			.background(@disabledButtonBackground);
			.border-color(@disabledButtonBackground);
			.color(@disabledButtonColor);
			.cursor(@disabledButtonCursor);
			&:hover {
				.background(@disabledButtonBackground);
				.border-color(@disabledButtonBackground);
				.color(@disabledButtonColor);
				.cursor(@disabledButtonCursor);
			}
		}
	}
}
